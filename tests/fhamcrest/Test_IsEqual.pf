module Test_IsEqual
   use iso_fortran_env

   use funit
   implicit none

   @suite(name='Hamcrest_IsEqual')
contains
   @test
   subroutine test_is_equal_intrinsic_logical()
      ! logical
      call assert_that(.true., is(equal_to(.true.)))
      call assert_that(.false., is(equal_to(.false.)))
      call assert_that(.true., is(equal_to(.false.)))
      @assertExceptionRaised()
      call assert_that(.false., is(equal_to(.true.)))
      @assertExceptionRaised()
   end subroutine test_is_equal_intrinsic_logical

   @test
   subroutine test_is_equal_intrinsic_integer()
      ! integer
      call assert_that(1, is(equal_to(1)))
      call assert_that(2, is(equal_to(2)))
      call assert_that(1, is(equal_to(2)))
      @assertExceptionRaised()
      call assert_that(2, is(equal_to(1)))
      @assertExceptionRaised()

      ! INT32
      call assert_that(1_INT32, is(equal_to(1_INT32)))
      call assert_that(2_INT32, is(equal_to(2_INT32)))
      call assert_that(1_INT32, is(equal_to(2_INT32)))
      @assertExceptionRaised()
      call assert_that(2_INT32, is(equal_to(1_INT32)))
      @assertExceptionRaised()

      ! INT64
      call assert_that(1_INT64, is(equal_to(1_INT64)))
      call assert_that(2_INT64, is(equal_to(2_INT64)))
      call assert_that(1_INT64, is(equal_to(2_INT64)))
      @assertExceptionRaised()
      call assert_that(2_INT64, is(equal_to(1_INT64)))
      @assertExceptionRaised()
   end subroutine test_is_equal_intrinsic_integer

   @test
   subroutine test_is_equal_intrinsic_real()
      ! real
      call assert_that(1., is(equal_to(1.)))
      call assert_that(2., is(equal_to(2.)))
      call assert_that(1., is(equal_to(2.)))
      @assertExceptionRaised()
      call assert_that(2., is(equal_to(1.)))
      @assertExceptionRaised()

      ! double
      call assert_that(1.d0, is(equal_to(1.d0)))
      call assert_that(2.d0, is(equal_to(2.d0)))
      call assert_that(1.d0, is(equal_to(2.d0)))
      @assertExceptionRaised()
      call assert_that(2.d0, is(equal_to(1.d0)))
      @assertExceptionRaised()

      ! REAL32
      call assert_that(1_REAL32, is(equal_to(1_REAL32)))
      call assert_that(2_REAL32, is(equal_to(2_REAL32)))
      call assert_that(1_REAL32, is(equal_to(2_REAL32)))
      @assertExceptionRaised()
      call assert_that(2_REAL32, is(equal_to(1_REAL32)))
      @assertExceptionRaised()

      ! REAL64
      call assert_that(1_REAL64, is(equal_to(1_REAL64)))
      call assert_that(2_REAL64, is(equal_to(2_REAL64)))
      call assert_that(1_REAL64, is(equal_to(2_REAL64)))
      @assertExceptionRaised()
      call assert_that(2_REAL64, is(equal_to(1_REAL64)))
      @assertExceptionRaised()

!      ! REAL128
!      call assert_that(1_REAL128, is(equal_to(1_REAL128)))
!      call assert_that(2_REAL128, is(equal_to(2_REAL128)))
!      call assert_that(1_REAL128, is(equal_to(2_REAL128)))
!      @assertExceptionRaised()
!      call assert_that(2_REAL128, is(equal_to(1_REAL128)))
!      @assertExceptionRaised()
   end subroutine test_is_equal_intrinsic_real

   @test
   subroutine test_is_equal_intrinsic_complex()
      complex(kind=REAL32) :: a_s = (1.0, 2.0)
      complex(kind=REAL32) :: b_s = (3.0, 4.0)

      complex(kind=REAL32) :: a_d = (1.d0, 2.d0)
      complex(kind=REAL32) :: b_d = (3.d0, 4.d0)

      complex(kind=REAL32) :: a_32 = (1_REAL32, 2_REAL32)
      complex(kind=REAL32) :: b_32 = (3_REAL32, 4_REAL32)

      complex(kind=REAL64) :: a_64 = (1_REAL64, 2_REAL64)
      complex(kind=REAL64) :: b_64 = (3_REAL64, 4_REAL64)

      ! complex single
      call assert_that(a_s, is(equal_to(a_s)))
      call assert_that(b_s, is(equal_to(b_s)))
      call assert_that(a_s, is(equal_to(b_s)))
      @assertExceptionRaised()
      call assert_that(b_s, is(equal_to(a_s)))
      @assertExceptionRaised()

      ! complex double
      call assert_that(a_d, is(equal_to(a_d)))
      call assert_that(b_d, is(equal_to(b_d)))
      call assert_that(a_d, is(equal_to(b_d)))
      @assertExceptionRaised()
      call assert_that(b_d, is(equal_to(a_d)))
      @assertExceptionRaised()

      ! complex REAL32
      call assert_that(a_32, is(equal_to(a_32)))
      call assert_that(b_32, is(equal_to(b_32)))
      call assert_that(a_32, is(equal_to(b_32)))
      @assertExceptionRaised()
      call assert_that(b_32, is(equal_to(a_32)))
      @assertExceptionRaised()

      ! complex REAL64
      call assert_that(a_64, is(equal_to(a_64)))
      call assert_that(b_64, is(equal_to(b_64)))
      call assert_that(a_64, is(equal_to(b_64)))
      @assertExceptionRaised()
      call assert_that(b_64, is(equal_to(a_64)))
      @assertExceptionRaised()
   end subroutine test_is_equal_intrinsic_complex

   @test
   subroutine test_is_equal_intrinsic_str()
      character(len=*), parameter :: test0 = 'test'
      character(len=*), parameter :: test1 = '    test'
      character(len=*), parameter :: test2 = 'test    '

      call assert_that(test0, is(equal_to(test0)))
      call assert_that(test1, is(equal_to(test1)))
      call assert_that(test2, is(equal_to(test2)))

      call assert_that(test0, is(equal_to(test1)))
      @assertExceptionRaised()
      call assert_that(test0, is(equal_to(test2)))
      @assertExceptionRaised()
      call assert_that(test1, is(equal_to(test0)))
      @assertExceptionRaised()
      call assert_that(test1, is(equal_to(test2)))
      @assertExceptionRaised()
      call assert_that(test2, is(equal_to(test0)))
      @assertExceptionRaised()
      call assert_that(test2, is(equal_to(test1)))
      @assertExceptionRaised()
   end subroutine test_is_equal_intrinsic_str

   @test
   subroutine test_is_equal_array_1d()
      integer              :: int32_array(3)
      integer(kind=INT64)  :: int64_array(3)
      real(kind=REAL32)    :: real32_array(3)
      real(kind=REAL64)    :: real64_array(3)
      complex(kind=REAL32) :: complex32_array(3)
      complex(kind=REAL64) :: complex64_array(3)

      int32_array     = reshape([1, 2, 3], shape(int32_array))
      int64_array     = int32_array
      real32_array    = int32_array
      real64_array    = int32_array
      complex32_array = int32_array
      complex64_array = int32_array

      call assert_that(int32_array, is(equal_to(int32_array)))
      call assert_that(int64_array, is(equal_to(int64_array)))
      call assert_that(real32_array, is(equal_to(real32_array)))
      call assert_that(real64_array, is(equal_to(real64_array)))
      call assert_that(complex32_array, is(equal_to(complex32_array)))
      call assert_that(complex64_array, is(equal_to(complex64_array)))

      call assert_that(['a', 'b'], is(equal_to(['a', 'b'])))

      call assert_that(1, is(equal_to(int32_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(int64_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(real32_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(real64_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(complex32_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(complex64_array)))
      @assertExceptionRaised()
   end subroutine test_is_equal_array_1d

   @test
   subroutine test_is_equal_array_2d()
      integer              :: int32_array(2,2)
      integer(kind=INT64)  :: int64_array(2,2)
      real(kind=REAL32)    :: real32_array(2,2)
      real(kind=REAL64)    :: real64_array(2,2)
      complex(kind=REAL32) :: complex32_array(2,2)
      complex(kind=REAL64) :: complex64_array(2,2)

      int32_array     = reshape([1, 2, 3, 4], shape(int32_array))
      int64_array     = int32_array
      real32_array    = int32_array
      real64_array    = int32_array
      complex32_array = int32_array
      complex64_array = int32_array

      call assert_that(int32_array, is(equal_to(int32_array)))
      call assert_that(int64_array, is(equal_to(int64_array)))
      call assert_that(real32_array, is(equal_to(real32_array)))
      call assert_that(real64_array, is(equal_to(real64_array)))
      call assert_that(complex32_array, is(equal_to(complex32_array)))
      call assert_that(complex64_array, is(equal_to(complex64_array)))

      call assert_that(['a', 'b'], is(equal_to(['a', 'b'])))

      call assert_that(1, is(equal_to(int32_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(int64_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(real32_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(real64_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(complex32_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(complex64_array)))
      @assertExceptionRaised()

      call assert_that([1,2,3], is(equal_to(int32_array)))
      @assertExceptionRaised()
      call assert_that([1,2,3], is(equal_to(int64_array)))
      @assertExceptionRaised()
      call assert_that([1,2,3], is(equal_to(real32_array)))
      @assertExceptionRaised()
      call assert_that([1,2,3], is(equal_to(real64_array)))
      @assertExceptionRaised()
      call assert_that([1,2,3], is(equal_to(complex32_array)))
      @assertExceptionRaised()
      call assert_that([1,2,3], is(equal_to(complex64_array)))
      @assertExceptionRaised()
   end subroutine test_is_equal_array_2d

   @test
   subroutine test_is_equal_array_3d()
      integer              :: int32_array(2,2,2)
      integer(kind=INT64)  :: int64_array(2,2,2)
      real(kind=REAL32)    :: real32_array(2,2,2)
      real(kind=REAL64)    :: real64_array(2,2,2)
      complex(kind=REAL32) :: complex32_array(2,2,2)
      complex(kind=REAL64) :: complex64_array(2,2,2)

      integer :: int_2D(2,2)

      int32_array     = reshape([1, 2, 3, 4, 5, 6, 7, 8], shape(int32_array))
      int64_array     = int32_array
      real32_array    = int32_array
      real64_array    = int32_array
      complex32_array = int32_array
      complex64_array = int32_array

      int_2D = reshape([1, 2, 3, 4], shape(int_2D))

      call assert_that(int32_array, is(equal_to(int32_array)))
      call assert_that(int64_array, is(equal_to(int64_array)))
      call assert_that(real32_array, is(equal_to(real32_array)))
      call assert_that(real64_array, is(equal_to(real64_array)))
      call assert_that(complex32_array, is(equal_to(complex32_array)))
      call assert_that(complex64_array, is(equal_to(complex64_array)))

      call assert_that(['a', 'b'], is(equal_to(['a', 'b'])))

      call assert_that(1, is(equal_to(int32_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(int64_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(real32_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(real64_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(complex32_array)))
      @assertExceptionRaised()
      call assert_that(1, is(equal_to(complex64_array)))
      @assertExceptionRaised()

      call assert_that([1,2,3], is(equal_to(int32_array)))
      @assertExceptionRaised()
      call assert_that([1,2,3], is(equal_to(int64_array)))
      @assertExceptionRaised()
      call assert_that([1,2,3], is(equal_to(real32_array)))
      @assertExceptionRaised()
      call assert_that([1,2,3], is(equal_to(real64_array)))
      @assertExceptionRaised()
      call assert_that([1,2,3], is(equal_to(complex32_array)))
      @assertExceptionRaised()
      call assert_that([1,2,3], is(equal_to(complex64_array)))
      @assertExceptionRaised()

      call assert_that(int_2D, is(equal_to(int32_array)))
      @assertExceptionRaised()
      call assert_that(int_2D, is(equal_to(int64_array)))
      @assertExceptionRaised()
      call assert_that(int_2D, is(equal_to(real32_array)))
      @assertExceptionRaised()
      call assert_that(int_2D, is(equal_to(real64_array)))
      @assertExceptionRaised()
      call assert_that(int_2D, is(equal_to(complex32_array)))
      @assertExceptionRaised()
      call assert_that(int_2D, is(equal_to(complex64_array)))
      @assertExceptionRaised()
   end subroutine test_is_equal_array_3d
end module Test_IsEqual